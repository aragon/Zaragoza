// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewProcessAdded extends ethereum.Event {
  get params(): NewProcessAdded__Params {
    return new NewProcessAdded__Params(this);
  }
}

export class NewProcessAdded__Params {
  _event: NewProcessAdded;

  constructor(event: NewProcessAdded) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get process(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class ProcessStarted extends ethereum.Event {
  get params(): ProcessStarted__Params {
    return new ProcessStarted__Params(this);
  }
}

export class ProcessStarted__Params {
  _event: ProcessStarted;

  constructor(event: ProcessStarted) {
    this._event = event;
  }

  get proposal(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get executionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Processes__processesResultPermissionsStruct extends ethereum.Tuple {
  get start(): string {
    return this[0].toString();
  }

  get execute(): string {
    return this[1].toString();
  }

  get halt(): string {
    return this[2].toString();
  }

  get forward(): string {
    return this[3].toString();
  }

  get stop(): string {
    return this[4].toString();
  }

  get vote(): string {
    return this[5].toString();
  }
}

export class Processes__processesResult {
  value0: Address;
  value1: Processes__processesResultPermissionsStruct;
  value2: Bytes;

  constructor(
    value0: Address,
    value1: Processes__processesResultPermissionsStruct,
    value2: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }
}

export class Processes__startResultProcessStruct extends ethereum.Tuple {
  get governancePrimitive(): Address {
    return this[0].toAddress();
  }

  get permissions(): Processes__startResultProcessPermissionsStruct {
    return changetype<Processes__startResultProcessPermissionsStruct>(
      this[1].toTuple()
    );
  }

  get allowedActions(): Array<
    Processes__startResultProcessAllowedActionsStruct
  > {
    return this[2].toTupleArray<
      Processes__startResultProcessAllowedActionsStruct
    >();
  }

  get metadata(): Bytes {
    return this[3].toBytes();
  }
}

export class Processes__startResultProcessPermissionsStruct extends ethereum.Tuple {
  get start(): string {
    return this[0].toString();
  }

  get execute(): string {
    return this[1].toString();
  }

  get halt(): string {
    return this[2].toString();
  }

  get forward(): string {
    return this[3].toString();
  }

  get stop(): string {
    return this[4].toString();
  }

  get vote(): string {
    return this[5].toString();
  }
}

export class Processes__startResultProcessAllowedActionsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get methods(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class Processes__startResult {
  value0: Processes__startResultProcessStruct;
  value1: BigInt;

  constructor(value0: Processes__startResultProcessStruct, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Processes__startInputProposalStruct extends ethereum.Tuple {
  get processName(): string {
    return this[0].toString();
  }

  get actions(): Array<Processes__startInputProposalActionsStruct> {
    return this[1].toTupleArray<Processes__startInputProposalActionsStruct>();
  }

  get metadata(): Bytes {
    return this[2].toBytes();
  }

  get additionalArguments(): Bytes {
    return this[3].toBytes();
  }
}

export class Processes__startInputProposalActionsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class Processes extends ethereum.SmartContract {
  static bind(address: Address): Processes {
    return new Processes("Processes", address);
  }

  PROCESSES_SET_ROLE(): Bytes {
    let result = super.call(
      "PROCESSES_SET_ROLE",
      "PROCESSES_SET_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PROCESSES_SET_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PROCESSES_SET_ROLE",
      "PROCESSES_SET_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROCESSES_START_ROLE(): Bytes {
    let result = super.call(
      "PROCESSES_START_ROLE",
      "PROCESSES_START_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PROCESSES_START_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PROCESSES_START_ROLE",
      "PROCESSES_START_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_ROLE(): Bytes {
    let result = super.call("UPGRADE_ROLE", "UPGRADE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_UPGRADE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("UPGRADE_ROLE", "UPGRADE_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  processes(param0: string): Processes__processesResult {
    let result = super.call(
      "processes",
      "processes(string):(address,(string,string,string,string,string,string),bytes)",
      [ethereum.Value.fromString(param0)]
    );

    return new Processes__processesResult(
      result[0].toAddress(),
      changetype<Processes__processesResultPermissionsStruct>(
        result[1].toTuple()
      ),
      result[2].toBytes()
    );
  }

  try_processes(
    param0: string
  ): ethereum.CallResult<Processes__processesResult> {
    let result = super.tryCall(
      "processes",
      "processes(string):(address,(string,string,string,string,string,string),bytes)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Processes__processesResult(
        value[0].toAddress(),
        changetype<Processes__processesResultPermissionsStruct>(
          value[1].toTuple()
        ),
        value[2].toBytes()
      )
    );
  }

  start(proposal: Processes__startInputProposalStruct): Processes__startResult {
    let result = super.call(
      "start",
      "start((string,(address,uint256,bytes)[],bytes,bytes)):((address,(string,string,string,string,string,string),(address,bytes4[])[],bytes),uint256)",
      [ethereum.Value.fromTuple(proposal)]
    );

    return changetype<Processes__startResult>(
      new Processes__startResult(
        changetype<Processes__startResultProcessStruct>(result[0].toTuple()),
        result[1].toBigInt()
      )
    );
  }

  try_start(
    proposal: Processes__startInputProposalStruct
  ): ethereum.CallResult<Processes__startResult> {
    let result = super.tryCall(
      "start",
      "start((string,(address,uint256,bytes)[],bytes,bytes)):((address,(string,string,string,string,string,string),(address,bytes4[])[],bytes),uint256)",
      [ethereum.Value.fromTuple(proposal)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Processes__startResult>(
        new Processes__startResult(
          changetype<Processes__startResultProcessStruct>(value[0].toTuple()),
          value[1].toBigInt()
        )
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetProcessCall extends ethereum.Call {
  get inputs(): SetProcessCall__Inputs {
    return new SetProcessCall__Inputs(this);
  }

  get outputs(): SetProcessCall__Outputs {
    return new SetProcessCall__Outputs(this);
  }
}

export class SetProcessCall__Inputs {
  _call: SetProcessCall;

  constructor(call: SetProcessCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get process(): SetProcessCallProcessStruct {
    return changetype<SetProcessCallProcessStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetProcessCall__Outputs {
  _call: SetProcessCall;

  constructor(call: SetProcessCall) {
    this._call = call;
  }
}

export class SetProcessCallProcessStruct extends ethereum.Tuple {
  get governancePrimitive(): Address {
    return this[0].toAddress();
  }

  get permissions(): SetProcessCallProcessPermissionsStruct {
    return changetype<SetProcessCallProcessPermissionsStruct>(
      this[1].toTuple()
    );
  }

  get allowedActions(): Array<SetProcessCallProcessAllowedActionsStruct> {
    return this[2].toTupleArray<SetProcessCallProcessAllowedActionsStruct>();
  }

  get metadata(): Bytes {
    return this[3].toBytes();
  }
}

export class SetProcessCallProcessPermissionsStruct extends ethereum.Tuple {
  get start(): string {
    return this[0].toString();
  }

  get execute(): string {
    return this[1].toString();
  }

  get halt(): string {
    return this[2].toString();
  }

  get forward(): string {
    return this[3].toString();
  }

  get stop(): string {
    return this[4].toString();
  }

  get vote(): string {
    return this[5].toString();
  }
}

export class SetProcessCallProcessAllowedActionsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get methods(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class StartCall extends ethereum.Call {
  get inputs(): StartCall__Inputs {
    return new StartCall__Inputs(this);
  }

  get outputs(): StartCall__Outputs {
    return new StartCall__Outputs(this);
  }
}

export class StartCall__Inputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }

  get proposal(): StartCallProposalStruct {
    return changetype<StartCallProposalStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class StartCall__Outputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }

  get process(): StartCallProcessStruct {
    return changetype<StartCallProcessStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }

  get executionId(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class StartCallProposalStruct extends ethereum.Tuple {
  get processName(): string {
    return this[0].toString();
  }

  get actions(): Array<StartCallProposalActionsStruct> {
    return this[1].toTupleArray<StartCallProposalActionsStruct>();
  }

  get metadata(): Bytes {
    return this[2].toBytes();
  }

  get additionalArguments(): Bytes {
    return this[3].toBytes();
  }
}

export class StartCallProposalActionsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }
}

export class StartCallProcessStruct extends ethereum.Tuple {
  get governancePrimitive(): Address {
    return this[0].toAddress();
  }

  get permissions(): StartCallProcessPermissionsStruct {
    return changetype<StartCallProcessPermissionsStruct>(this[1].toTuple());
  }

  get allowedActions(): Array<StartCallProcessAllowedActionsStruct> {
    return this[2].toTupleArray<StartCallProcessAllowedActionsStruct>();
  }

  get metadata(): Bytes {
    return this[3].toBytes();
  }
}

export class StartCallProcessPermissionsStruct extends ethereum.Tuple {
  get start(): string {
    return this[0].toString();
  }

  get execute(): string {
    return this[1].toString();
  }

  get halt(): string {
    return this[2].toString();
  }

  get forward(): string {
    return this[3].toString();
  }

  get stop(): string {
    return this[4].toString();
  }

  get vote(): string {
    return this[5].toString();
  }
}

export class StartCallProcessAllowedActionsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get methods(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
