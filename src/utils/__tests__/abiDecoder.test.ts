import * as abiDecoder from '../abiDecoder';
import {Abi} from '../abiDecoder';
import {BigNumber, utils} from 'ethers';

// Test Params
const testABI = [
  {
    inputs: [{type: 'address', name: ''}],
    constant: true,
    name: 'isInstantiation',
    payable: false,
    outputs: [{type: 'bool', name: ''}],
    type: 'function',
  },
  {
    inputs: [
      {type: 'address[]', name: '_owners'},
      {type: 'uint256', name: '_required'},
      {type: 'uint256', name: '_dailyLimit'},
    ],
    constant: false,
    name: 'create',
    payable: false,
    outputs: [{type: 'address', name: 'wallet'}],
    type: 'function',
  },
  {
    inputs: [
      {type: 'address', name: ''},
      {type: 'uint256', name: ''},
    ],
    constant: true,
    name: 'instantiations',
    payable: false,
    outputs: [{type: 'address', name: ''}],
    type: 'function',
  },
  {
    inputs: [{type: 'address', name: 'creator'}],
    constant: true,
    name: 'getInstantiationCount',
    payable: false,
    outputs: [{type: 'uint256', name: ''}],
    type: 'function',
  },
  {
    inputs: [
      {indexed: false, type: 'address', name: 'sender'},
      {indexed: false, type: 'address', name: 'instantiation'},
    ],
    type: 'event',
    name: 'ContractInstantiation',
    anonymous: false,
  },
] as Abi[];
const testArrNumbersABI = [
  {
    constant: false,
    inputs: [{name: 'n', type: 'uint256[]'}],
    name: 'numbers',
    outputs: [{name: '', type: 'uint256'}],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as Abi[];

const abiV2 = [
  {
    constant: false,
    inputs: [
      utils.ParamType.fromObject({
        components: [
          utils.ParamType.fromObject({
            components: [
              utils.ParamType.fromObject({
                baseType: 'address',
                name: 'target',
                type: 'address',
              }),
              utils.ParamType.fromObject({
                baseType: 'uint256',
                name: 'gasLimit',
                type: 'uint256',
              }),
              utils.ParamType.fromObject({
                baseType: 'uint256',
                name: 'gasPrice',
                type: 'uint256',
              }),
              utils.ParamType.fromObject({
                baseType: 'bytes',
                name: 'encodedFunction',
                type: 'bytes',
              }),
            ],
            baseType: 'struct EIP712Sig.CallData',
            name: 'callData',
            type: 'tuple',
          }),
          utils.ParamType.fromObject({
            components: [
              utils.ParamType.fromObject({
                baseType: 'address',
                name: 'senderAccount',
                type: 'address',
              }),
              utils.ParamType.fromObject({
                baseType: 'uint256',
                name: 'senderNonce',
                type: 'uint256',
              }),
              utils.ParamType.fromObject({
                baseType: 'address',
                name: 'relayAddress',
                type: 'address',
              }),
              utils.ParamType.fromObject({
                baseType: 'uint256',
                name: 'pctRelayFee',
                type: 'uint256',
              }),
            ],
            baseType: 'struct EIP712Sig.RelayData',
            name: 'relayData',
            type: 'tuple',
          }),
        ],
        baseType: 'struct EIP712Sig.RelayRequest',
        name: 'relayRequest',
        type: 'tuple',
      }),
      utils.ParamType.fromObject({
        baseType: 'bytes',
        name: 'signature',
        type: 'bytes',
      }),
      {baseType: 'bytes', name: 'approvalData', type: 'bytes'},
    ],
    name: 'relayCall',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as Abi[];

describe('abi decoder', () => {
  it('get abis', () => {
    const abis = abiDecoder.getABIs();
    expect(Array.isArray(abis)).toBe(true);
    expect(abis).toHaveLength(0);
  });

  it('add abis', () => {
    abiDecoder.addABI(testABI);
    const abis = abiDecoder.getABIs();
    expect(Array.isArray(abis)).toBe(true);
    expect(abis).toHaveLength(5);
    const methodIDs = abiDecoder.getMethodIDs();
    expect(typeof methodIDs).toBe('object');
    expect(Object.keys(methodIDs)).toHaveLength(5);
  });

  it('add abis generated by ABIEncoderV2', () => {
    abiDecoder.addABI(abiV2);
    const methodIDs = abiDecoder.getMethodIDs();
    const abis = abiDecoder.getABIs();
    expect(abis).toHaveLength(6);
    expect(Object.keys(methodIDs)[5]).toBe('d4f8f131');
  });

  it('decode data for ABIEncoderV2 abi', () => {
    abiDecoder.addABI(abiV2);
    const testData =
      '0xd4f8f1310000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000050a5cf333fc36a18c8f96b1d1e7a2b013c6267ac000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046dccf96fe3f3beef51c72c68a1f3ad9183a6561000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000254dffcd3277c0b1660f6d42efbb754edababc2b00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000059682f000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000642ac0df260000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000411de3d1ce0d680d92171da7852a1df1a655280126d809b6f10d046a60e257c187684da02cf3fb67e6939ac48459e26f6c0bfdedf70a1e8f6921a4a0ff331448641b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
    const decodedData = abiDecoder.decodeMethod(testData);
    expect(typeof decodedData).toBe('object');
    expect(Object.keys(decodedData!)).toContain('name');
    expect(Object.keys(decodedData!)).toContain('params');
    expect(typeof decodedData!.name).toBe('string');
    expect(Array.isArray(decodedData!.params)).toBe(true);
    expect(decodedData!.params).toHaveLength(3);
    const vals = (decodedData!.params[0].value as (string | BigNumber)[][]).map(
      i => i.map((v: {}) => v.toString())
    );
    expect(vals).toEqual([
      [
        '0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B',
        '1000000',
        '24000000000',
        '0x2ac0df260000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000',
      ],
      [
        '0x50A5cf333FC36A18c8F96B1D1e7a2B013C6267aC',
        '0',
        '0x46DCcF96Fe3f3bEEf51c72c68A1F3Ad9183a6561',
        '12',
      ],
    ]);
  });

  it('decode data', () => {
    abiDecoder.addABI(testABI);
    const testData =
      '0x53d9d9100000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d9c5f7d4de3cef51ad3b7235d79ccc95114de5000000000000000000000000a6d9c5f7d4de3cef51ad3b7235d79ccc95114daa';
    const decodedData = abiDecoder.decodeMethod(testData);
    expect(typeof decodedData).toBe('object');
    expect(Object.keys(decodedData!)).toContain('name');
    expect(Object.keys(decodedData!)).toContain('params');
    expect(typeof decodedData!.name).toBe('string');
    expect(Array.isArray(decodedData!.params)).toBe(true);
    expect(decodedData!.params).toHaveLength(3);
    expect(decodedData!.params[0].value).toEqual([
      '0xa6d9c5f7d4de3cef51ad3b7235d79ccc95114de5',
      '0xa6d9c5f7d4de3cef51ad3b7235d79ccc95114daa',
    ]);
    expect(decodedData!.params[0].name).toEqual('_owners');
    expect(decodedData!.params[0].type).toEqual('address[]');
    expect(decodedData!.params[1].value).toEqual('1');
    expect(decodedData!.params[1].name).toEqual('_required');
    expect(decodedData!.params[1].type).toEqual('uint256');
    expect(decodedData!.params[2].value).toEqual('0');
    expect(decodedData!.params[2].name).toEqual('_dailyLimit');
    expect(decodedData!.params[2].type).toEqual('uint256');
  });

  it('decode data with arrays', () => {
    abiDecoder.addABI(testArrNumbersABI);
    const testData =
      '0x3727308100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003';
    const decodedData = abiDecoder.decodeMethod(testData);
    expect(typeof decodedData).toBe('object');
    expect(Object.keys(decodedData!)).toContain('name');
    expect(Object.keys(decodedData!)).toContain('params');
    expect(typeof decodedData!.name).toBe('string');
    expect(Array.isArray(decodedData!.params)).toBe(true);
    expect(decodedData!.params).toHaveLength(1);
    expect((decodedData!.params[0].value as string[])[0]).toEqual('1');
    expect((decodedData!.params[0].value as string[])[1]).toEqual('2');
    expect((decodedData!.params[0].value as string[])[2]).toEqual('3');
    expect(decodedData!.params[0].name).toEqual('n');
    expect(decodedData!.params[0].type).toEqual('uint256[]');
  });

  it('remove ABI', () => {
    abiDecoder.addABI(testABI);
    let methods = abiDecoder.getMethodIDs();
    expect(typeof methods).toBe('object');
    expect(Object.keys(methods)).toHaveLength(7);

    abiDecoder.removeABI(testABI);

    methods = abiDecoder.getMethodIDs();
    expect(typeof methods).toBe('object');
    expect(Object.keys(methods)).toHaveLength(2);
  });
});
