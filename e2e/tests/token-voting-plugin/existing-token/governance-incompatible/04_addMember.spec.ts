import {LOCALHOST_URL} from '../../../../basic.setup';
import {testWithMetaMask as test} from '../../../../testWithMetaMask';

// // Test is adding a DAO member by wrapping tokens
test('Add DAO member Token Wrap', async ({
  context,
  page,
  extensionId,
  metamask,
}) => {
  await page.goto(`${LOCALHOST_URL}/`);
  await page.getByRole('button', {name: 'Accept all'}).click();
  await page.getByRole('button', {name: 'Connect wallet'}).click();
  await page.getByRole('button', {name: 'MetaMask MetaMask'}).nth(0).click();
  await metamask.connectToDapp();
  await page.getByRole('radio', {name: 'Member'}).click();
  await page.locator('[id="radix-\\:r16\\:"]').click();
  await page.getByText('Sort by recently created').click();
  await page;
  await page
    .getByRole('link', {
      name: 'TB Token Based DAO (governance incompatible token) DAO generated by automated',
    })
    .first()
    .click();
  await page
    .getByTestId('navLinks')
    .getByRole('button', {name: 'Members'})
    .click();
  await page.getByRole('button', {name: 'Join the DAO'}).click();
  await page.getByPlaceholder('0').click();
  await page.getByPlaceholder('0').fill('0.01');
  await page.getByRole('button', {name: 'Approve tokens'}).click();
  await page.waitForTimeout(1000);
  await page.getByRole('button', {name: 'Switch to Ethereum Sepolia'}).click();
  await metamask.approveSwitchNetwork();
  await page.waitForTimeout(1000);
  await page.getByRole('button', {name: 'Join the DAO'}).click();
  await page.getByPlaceholder('0').click();
  await page.getByPlaceholder('0').fill('0.01');
  await page.getByRole('button', {name: 'Approve tokens'}).click();
  await page.waitForTimeout(5000);
  await metamask.approveTokenPermission();
  await page.waitForTimeout(1000);
  await page.getByRole('button', {name: 'Wrap tokens'}).click();
  await metamask.confirmTransaction();
  await page.getByRole('button', {name: 'See community'}).click();
});
